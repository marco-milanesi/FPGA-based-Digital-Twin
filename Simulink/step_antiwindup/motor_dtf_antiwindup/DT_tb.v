// -------------------------------------------------------------
// 
// File Name: D:\Github\embedded-DT\Simulink\step_antiwindup\motor_dtf_antiwindup\DT_tb.v
// Created: 2023-04-29 01:27:33
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.0001
// Target subsystem base rate: 0.0001
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DT_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DT_tb;



  reg  clk;
  reg  reset_x;
  wire enb;
  wire error_done;  // ufix1
  wire phase_1;
  wire error_done_enb;  // ufix1
  reg [13:0] PV_addr;  // ufix14
  wire error_lastAddr;  // ufix1
  wire resetn;
  reg  check5_done;  // ufix1
  wire i_action_done;  // ufix1
  wire i_action_done_enb;  // ufix1
  wire i_action_lastAddr;  // ufix1
  reg  check4_done;  // ufix1
  wire p_action_done;  // ufix1
  wire p_action_done_enb;  // ufix1
  wire p_action_lastAddr;  // ufix1
  reg  check3_done;  // ufix1
  wire MV_done;  // ufix1
  wire MV_done_enb;  // ufix1
  wire MV_lastAddr;  // ufix1
  reg  check2_done;  // ufix1
  wire PV_done;  // ufix1
  wire PV_done_enb;  // ufix1
  wire PV_active;  // ufix1
  wire tb_enb;
  wire snkDonen;
  wire notDone;
  wire snkDone;
  wire tb_enb_delay;
  reg [3:0] counter;  // ufix4
  wire phasesel_1_relop1;
  wire ce_out;
  wire PV_enb;  // ufix1
  wire PV_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire signed [9:0] rawData_SP;  // sfix10
  reg signed [9:0] holdData_SP;  // sfix10
  reg signed [9:0] SP_offset;  // sfix10
  wire signed [9:0] SP;  // sfix10
  wire signed [9:0] rawData_kp;  // sfix10
  reg signed [9:0] holdData_kp;  // sfix10
  reg signed [9:0] kp_offset;  // sfix10
  wire signed [9:0] kp;  // sfix10
  wire signed [9:0] rawData_ti;  // sfix10
  reg signed [9:0] holdData_ti;  // sfix10
  reg signed [9:0] ti_offset;  // sfix10
  wire signed [9:0] ti;  // sfix10
  wire signed [9:0] PV;  // sfix10
  wire signed [9:0] MV;  // sfix10
  wire signed [9:0] p_action;  // sfix10
  wire signed [9:0] i_action;  // sfix10
  wire signed [9:0] error;  // sfix10
  wire [13:0] PV_addr_delay_1;  // ufix14
  reg signed [31:0] fp_PV_expected;  // sfix32
  reg signed [9:0] PV_expected;  // sfix10
  reg signed [31:0] status_PV_expected;  // sfix32
  reg signed [9:0] PV_ref_hold;  // sfix10
  wire signed [9:0] PV_refTmp;  // sfix10
  wire signed [9:0] PV_ref;  // sfix10
  reg  PV_testFailure;  // ufix1
  wire [13:0] MV_addr_delay_1;  // ufix14
  reg signed [31:0] fp_MV_expected;  // sfix32
  reg signed [9:0] MV_expected;  // sfix10
  reg signed [31:0] status_MV_expected;  // sfix32
  reg signed [9:0] MV_ref_hold;  // sfix10
  wire signed [9:0] MV_refTmp;  // sfix10
  wire signed [9:0] MV_ref;  // sfix10
  reg  MV_testFailure;  // ufix1
  wire [13:0] p_action_addr_delay_1;  // ufix14
  reg signed [31:0] fp_p_action_expected;  // sfix32
  reg signed [9:0] p_action_expected;  // sfix10
  reg signed [31:0] status_p_action_expected;  // sfix32
  reg signed [9:0] p_action_ref_hold;  // sfix10
  wire signed [9:0] p_action_refTmp;  // sfix10
  wire signed [9:0] p_action_ref;  // sfix10
  reg  p_action_testFailure;  // ufix1
  wire signed [9:0] i_action_expected_1;  // sfix10
  reg signed [9:0] i_action_ref_hold;  // sfix10
  wire signed [9:0] i_action_ref;  // sfix10
  reg  i_action_testFailure;  // ufix1
  wire [13:0] error_addr_delay_1;  // ufix14
  reg signed [31:0] fp_error_expected;  // sfix32
  reg signed [9:0] error_expected;  // sfix10
  reg signed [31:0] status_error_expected;  // sfix32
  reg signed [9:0] error_ref_hold;  // sfix10
  wire signed [9:0] error_refTmp;  // sfix10
  wire signed [9:0] error_ref;  // sfix10
  reg  error_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign error_done_enb = error_done & phase_1;



  assign error_lastAddr = PV_addr >= 14'b10011100010000;



  assign error_done = error_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_5
      if (reset_x) begin
        check5_done <= 0;
      end
      else begin
        if (error_done_enb) begin
          check5_done <= error_done;
        end
      end
    end

  assign i_action_done_enb = i_action_done & phase_1;



  assign i_action_lastAddr = PV_addr >= 14'b10011100010000;



  assign i_action_done = i_action_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_4
      if (reset_x) begin
        check4_done <= 0;
      end
      else begin
        if (i_action_done_enb) begin
          check4_done <= i_action_done;
        end
      end
    end

  assign p_action_done_enb = p_action_done & phase_1;



  assign p_action_lastAddr = PV_addr >= 14'b10011100010000;



  assign p_action_done = p_action_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_3
      if (reset_x) begin
        check3_done <= 0;
      end
      else begin
        if (p_action_done_enb) begin
          check3_done <= p_action_done;
        end
      end
    end

  assign MV_done_enb = MV_done & phase_1;



  assign MV_lastAddr = PV_addr >= 14'b10011100010000;



  assign MV_done = MV_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_2
      if (reset_x) begin
        check2_done <= 0;
      end
      else begin
        if (MV_done_enb) begin
          check2_done <= MV_done;
        end
      end
    end

  assign PV_done_enb = PV_done & phase_1;



  assign PV_active = PV_addr != 14'b10011100010000;



  assign notDone = tb_enb & snkDonen;



  assign #2 enb = notDone;

  assign snkDonen =  ~ snkDone;



  always 
    begin : clk_gen
      clk <= 1'b1;
      # (42);
      clk <= 1'b0;
      # (42);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (42);
        clk <= 1'b0;
        # (42);
        $stop;
      end
    end

  initial
    begin : reset_x_gen
      reset_x <= 1'b1;
      # (168);
      @ (posedge clk)
      # (2);
      reset_x <= 1'b0;
    end

  assign resetn =  ~ reset_x;



  assign tb_enb = resetn & snkDonen;



  assign tb_enb_delay = tb_enb;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 9
  always @(posedge clk)
    begin : slow_clock_enable_process
      if (reset_x == 1'b1) begin
        counter <= 4'b0001;
      end
      else begin
        if (tb_enb_delay) begin
          if (counter >= 4'b1001) begin
            counter <= 4'b0000;
          end
          else begin
            counter <= counter + 4'b0001;
          end
        end
      end
    end



  assign phasesel_1_relop1 = counter == 4'b0001;



  assign phase_1 = phasesel_1_relop1 & tb_enb;



  assign ce_out = enb & (phase_1 & tb_enb);



  assign PV_enb = ce_out & PV_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 10000
  always @(posedge clk)
    begin : c_2_process
      if (reset_x == 1'b1) begin
        PV_addr <= 14'b00000000000000;
      end
      else begin
        if (PV_enb) begin
          if (PV_addr >= 14'b10011100010000) begin
            PV_addr <= 14'b00000000000000;
          end
          else begin
            PV_addr <= PV_addr + 14'b00000000000001;
          end
        end
      end
    end



  assign PV_lastAddr = PV_addr >= 14'b10011100010000;



  assign PV_done = PV_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset_x) begin
        check1_done <= 0;
      end
      else begin
        if (PV_done_enb) begin
          check1_done <= PV_done;
        end
      end
    end

  assign snkDone = check5_done & (check4_done & (check3_done & (check1_done & check2_done)));



  // Data source for SP
  assign rawData_SP = (tb_enb == 1'b0 ? 10'sb0000000000 :
              10'sb0000111100);



  // holdData reg for SP
  always @(posedge clk)
    begin : stimuli_SP
      if (reset_x) begin
        holdData_SP <= 0;
      end
      else begin
        holdData_SP <= rawData_SP;
      end
    end

  always @(rawData_SP or tb_enb or tb_enb)
    begin : stimuli_SP_1
      if (tb_enb == 1'b0) begin
        SP_offset <= 10'b0;
      end
      else begin
        if (tb_enb == 1'b0) begin
          SP_offset <= holdData_SP;
        end
        else begin
          SP_offset <= rawData_SP;
        end
      end
    end

  assign #2 SP = SP_offset;

  // Data source for kp
  assign rawData_kp = (tb_enb == 1'b0 ? 10'sb0000000000 :
              10'sb0000000100);



  // holdData reg for kp
  always @(posedge clk)
    begin : stimuli_kp
      if (reset_x) begin
        holdData_kp <= 0;
      end
      else begin
        holdData_kp <= rawData_kp;
      end
    end

  always @(rawData_kp or tb_enb or tb_enb)
    begin : stimuli_kp_1
      if (tb_enb == 1'b0) begin
        kp_offset <= 10'b0;
      end
      else begin
        if (tb_enb == 1'b0) begin
          kp_offset <= holdData_kp;
        end
        else begin
          kp_offset <= rawData_kp;
        end
      end
    end

  assign #2 kp = kp_offset;

  // Data source for ti
  assign rawData_ti = (tb_enb == 1'b0 ? 10'sb0000000000 :
              10'sb0000000000);



  // holdData reg for ti
  always @(posedge clk)
    begin : stimuli_ti
      if (reset_x) begin
        holdData_ti <= 0;
      end
      else begin
        holdData_ti <= rawData_ti;
      end
    end

  always @(rawData_ti or tb_enb or tb_enb)
    begin : stimuli_ti_1
      if (tb_enb == 1'b0) begin
        ti_offset <= 10'b0;
      end
      else begin
        if (tb_enb == 1'b0) begin
          ti_offset <= holdData_ti;
        end
        else begin
          ti_offset <= rawData_ti;
        end
      end
    end

  assign #2 ti = ti_offset;

  DT u_DT (.clk(clk),
           .reset_x(reset_x),
           .SP(SP),  // sfix10
           .kp(kp),  // sfix10
           .ti(ti),  // sfix10
           .PV(PV),  // sfix10
           .MV(MV),  // sfix10
           .p_action(p_action),  // sfix10
           .i_action(i_action),  // sfix10
           .error(error)  // sfix10
           );

  assign #1 PV_addr_delay_1 = PV_addr;

  // Data source for PV_expected
  initial
    begin : PV_expected_fileread
      fp_PV_expected = $fopen("PV_expected.dat", "r");
      status_PV_expected = $rewind(fp_PV_expected);
    end

  always @(PV_addr_delay_1,  tb_enb)
    begin
      if (tb_enb == 0) begin
        PV_expected <= 0;
      end
      else  begin
        status_PV_expected = $fscanf(fp_PV_expected, "%h", PV_expected);
      end
    end

  // Bypass register to hold PV_ref
  always @(posedge clk)
    begin : DataHold_PV_ref
      if (reset_x) begin
        PV_ref_hold <= 0;
      end
      else begin
        if (ce_out) begin
          PV_ref_hold <= PV_expected;
        end
      end
    end

  assign PV_refTmp = PV_expected;

  assign PV_ref = (ce_out == 1'b0 ? PV_ref_hold :
              PV_refTmp);



  always @(posedge clk)
    begin : PV_checker
      if (reset_x == 1'b1) begin
        PV_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && PV !== PV_ref) begin
          PV_testFailure <= 1'b1;
          $display("ERROR in PV at time %t : Expected '%h' Actual '%h'", $time, PV_ref, PV);
        end
      end
    end

  assign #1 MV_addr_delay_1 = PV_addr;

  // Data source for MV_expected
  initial
    begin : MV_expected_fileread
      fp_MV_expected = $fopen("MV_expected.dat", "r");
      status_MV_expected = $rewind(fp_MV_expected);
    end

  always @(MV_addr_delay_1,  tb_enb)
    begin
      if (tb_enb == 0) begin
        MV_expected <= 0;
      end
      else  begin
        status_MV_expected = $fscanf(fp_MV_expected, "%h", MV_expected);
      end
    end

  // Bypass register to hold MV_ref
  always @(posedge clk)
    begin : DataHold_MV_ref
      if (reset_x) begin
        MV_ref_hold <= 0;
      end
      else begin
        if (ce_out) begin
          MV_ref_hold <= MV_expected;
        end
      end
    end

  assign MV_refTmp = MV_expected;

  assign MV_ref = (ce_out == 1'b0 ? MV_ref_hold :
              MV_refTmp);



  always @(posedge clk)
    begin : MV_checker
      if (reset_x == 1'b1) begin
        MV_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && MV !== MV_ref) begin
          MV_testFailure <= 1'b1;
          $display("ERROR in MV at time %t : Expected '%h' Actual '%h'", $time, MV_ref, MV);
        end
      end
    end

  assign #1 p_action_addr_delay_1 = PV_addr;

  // Data source for p_action_expected
  initial
    begin : p_action_expected_fileread
      fp_p_action_expected = $fopen("p_action_expected.dat", "r");
      status_p_action_expected = $rewind(fp_p_action_expected);
    end

  always @(p_action_addr_delay_1,  tb_enb)
    begin
      if (tb_enb == 0) begin
        p_action_expected <= 0;
      end
      else  begin
        status_p_action_expected = $fscanf(fp_p_action_expected, "%h", p_action_expected);
      end
    end

  // Bypass register to hold p_action_ref
  always @(posedge clk)
    begin : DataHold_p_action_ref
      if (reset_x) begin
        p_action_ref_hold <= 0;
      end
      else begin
        if (ce_out) begin
          p_action_ref_hold <= p_action_expected;
        end
      end
    end

  assign p_action_refTmp = p_action_expected;

  assign p_action_ref = (ce_out == 1'b0 ? p_action_ref_hold :
              p_action_refTmp);



  always @(posedge clk)
    begin : p_action_checker
      if (reset_x == 1'b1) begin
        p_action_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && p_action !== p_action_ref) begin
          p_action_testFailure <= 1'b1;
          $display("ERROR in p_action at time %t : Expected '%h' Actual '%h'", $time, p_action_ref, p_action);
        end
      end
    end

  // Data source for i_action_expected
  assign i_action_expected_1 = 10'sb0000000000;



  // Bypass register to hold i_action_ref
  always @(posedge clk)
    begin : DataHold_i_action_ref
      if (reset_x) begin
        i_action_ref_hold <= 0;
      end
      else begin
        if (ce_out) begin
          i_action_ref_hold <= i_action_expected_1;
        end
      end
    end

  // Data source for i_action_expected
  assign i_action_ref = (ce_out == 1'b0 ? i_action_ref_hold :
              10'sb0000000000);



  always @(posedge clk)
    begin : i_action_checker
      if (reset_x == 1'b1) begin
        i_action_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && i_action !== i_action_ref) begin
          i_action_testFailure <= 1'b1;
          $display("ERROR in i_action at time %t : Expected '%h' Actual '%h'", $time, i_action_ref, i_action);
        end
      end
    end

  assign #1 error_addr_delay_1 = PV_addr;

  // Data source for error_expected
  initial
    begin : error_expected_fileread
      fp_error_expected = $fopen("error_expected.dat", "r");
      status_error_expected = $rewind(fp_error_expected);
    end

  always @(error_addr_delay_1,  tb_enb)
    begin
      if (tb_enb == 0) begin
        error_expected <= 0;
      end
      else  begin
        status_error_expected = $fscanf(fp_error_expected, "%h", error_expected);
      end
    end

  // Bypass register to hold error_ref
  always @(posedge clk)
    begin : DataHold_error_ref
      if (reset_x) begin
        error_ref_hold <= 0;
      end
      else begin
        if (ce_out) begin
          error_ref_hold <= error_expected;
        end
      end
    end

  assign error_refTmp = error_expected;

  assign error_ref = (ce_out == 1'b0 ? error_ref_hold :
              error_refTmp);



  always @(posedge clk)
    begin : error_checker
      if (reset_x == 1'b1) begin
        error_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && error !== error_ref) begin
          error_testFailure <= 1'b1;
          $display("ERROR in error at time %t : Expected '%h' Actual '%h'", $time, error_ref, error);
        end
      end
    end

  assign testFailure = error_testFailure | (i_action_testFailure | (p_action_testFailure | (PV_testFailure | MV_testFailure)));



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // DT_tb

