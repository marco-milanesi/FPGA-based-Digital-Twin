// -------------------------------------------------------------
// 
// File Name: hdlsrc\motor_dtf\DT_tb.v
// Created: 2023-04-14 14:32:56
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// PV                            ce_out        1
// MV                            ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DT_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DT_tb;



  reg  clk;
  reg  reset_x;
  wire clk_enable;
  wire signed [15:0] rawData_kp;  // sfix16_En10
  wire signed [15:0] rawData_ti;  // sfix16_En10
  wire MV_done;  // ufix1
  wire rdEnb;
  wire MV_done_enb;  // ufix1
  reg [8:0] PV_addr;  // ufix9
  wire MV_lastAddr;  // ufix1
  wire resetn;
  reg  check2_done;  // ufix1
  wire PV_done;  // ufix1
  wire PV_done_enb;  // ufix1
  wire PV_active;  // ufix1
  reg signed [15:0] holdData_ti;  // sfix16_En10
  reg signed [15:0] ti_offset;  // sfix16_En10
  wire signed [15:0] ti_1;  // sfix16_En10
  reg signed [15:0] holdData_kp;  // sfix16_En10
  reg signed [15:0] kp_offset;  // sfix16_En10
  wire signed [15:0] kp_1;  // sfix16_En10
  reg [8:0] SP_addr;  // ufix9
  wire SP_active;  // ufix1
  reg  tb_enb_delay;
  wire SP_enb;  // ufix1
  wire [8:0] SP_addr_delay_1;  // ufix9
  reg signed [31:0] fp_SP;  // sfix32
  reg signed [15:0] rawData_SP;  // sfix16_En10
  reg signed [31:0] status_SP;  // sfix32
  reg signed [15:0] holdData_SP;  // sfix16_En10
  reg signed [15:0] SP_offset;  // sfix16_En10
  wire signed [15:0] SP;  // sfix16_En10
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  wire ce_out;
  wire signed [15:0] PV;  // sfix16_En10
  wire signed [15:0] MV;  // sfix16_En10
  wire PV_enb;  // ufix1
  wire PV_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [8:0] PV_addr_delay_1;  // ufix9
  reg signed [31:0] fp_PV_expected;  // sfix32
  reg signed [15:0] PV_expected;  // sfix16_En10
  reg signed [31:0] status_PV_expected;  // sfix32
  wire signed [15:0] PV_ref;  // sfix16_En10
  reg  PV_testFailure;  // ufix1
  wire [8:0] MV_addr_delay_1;  // ufix9
  reg signed [31:0] fp_MV_expected;  // sfix32
  reg signed [15:0] MV_expected;  // sfix16_En10
  reg signed [31:0] status_MV_expected;  // sfix32
  wire signed [15:0] MV_ref;  // sfix16_En10
  reg  MV_testFailure;  // ufix1
  wire testFailure;  // ufix1


  // Data source for kp
  assign rawData_kp = 16'sb0000100000000000;



  // Data source for ti
  assign rawData_ti = 16'sb0010100000000000;



  assign MV_done_enb = MV_done & rdEnb;



  assign MV_lastAddr = PV_addr >= 9'b111110100;



  assign MV_done = MV_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_2
      if (reset_x) begin
        check2_done <= 0;
      end
      else begin
        if (MV_done_enb) begin
          check2_done <= MV_done;
        end
      end
    end

  assign PV_done_enb = PV_done & rdEnb;



  assign PV_active = PV_addr != 9'b111110100;



  // holdData reg for SP_2
  always @(posedge clk)
    begin : stimuli_SP_2
      if (reset_x) begin
        holdData_ti <= 16'bx;
      end
      else begin
        holdData_ti <= rawData_ti;
      end
    end

  always @(rawData_ti or rdEnb)
    begin : stimuli_SP_2_1
      if (rdEnb == 1'b0) begin
        ti_offset <= holdData_ti;
      end
      else begin
        ti_offset <= rawData_ti;
      end
    end

  assign #2 ti_1 = ti_offset;

  // holdData reg for SP_1
  always @(posedge clk)
    begin : stimuli_SP_1
      if (reset_x) begin
        holdData_kp <= 16'bx;
      end
      else begin
        holdData_kp <= rawData_kp;
      end
    end

  always @(rawData_kp or rdEnb)
    begin : stimuli_SP_1_1
      if (rdEnb == 1'b0) begin
        kp_offset <= holdData_kp;
      end
      else begin
        kp_offset <= rawData_kp;
      end
    end

  assign #2 kp_1 = kp_offset;

  assign SP_active = SP_addr != 9'b111110100;



  assign SP_enb = SP_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 500
  always @(posedge clk)
    begin : DataTypeConversion_process
      if (reset_x == 1'b1) begin
        SP_addr <= 9'b000000000;
      end
      else begin
        if (SP_enb) begin
          if (SP_addr >= 9'b111110100) begin
            SP_addr <= 9'b000000000;
          end
          else begin
            SP_addr <= SP_addr + 9'b000000001;
          end
        end
      end
    end



  assign #1 SP_addr_delay_1 = SP_addr;

  // Data source for SP
  initial
    begin : SP_fileread
      fp_SP = $fopen("SP.dat", "r");
      status_SP = $rewind(fp_SP);
    end

  always @(SP_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_SP <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_SP = $fscanf(fp_SP, "%h", rawData_SP);
      end
    end

  // holdData reg for SP
  always @(posedge clk)
    begin : stimuli_SP
      if (reset_x) begin
        holdData_SP <= 16'bx;
      end
      else begin
        holdData_SP <= rawData_SP;
      end
    end

  always @(rawData_SP or rdEnb)
    begin : stimuli_SP_3
      if (rdEnb == 1'b0) begin
        SP_offset <= holdData_SP;
      end
      else begin
        SP_offset <= rawData_SP;
      end
    end

  assign #2 SP = SP_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset_x;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk)
    begin : u_enable_delay
      if (reset_x) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (snkDone == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_x_gen
      reset_x <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset_x <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  DT u_DT (.clk(clk),
           .reset_x(reset_x),
           .clk_enable(clk_enable),
           .SP(SP),  // sfix16_En10
           .kp(kp_1),  // sfix16_En10
           .ti(ti_1),  // sfix16_En10
           .ce_out(ce_out),
           .PV(PV),  // sfix16_En10
           .MV(MV)  // sfix16_En10
           );

  assign PV_enb = ce_out & PV_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 500
  always @(posedge clk)
    begin : c_2_process
      if (reset_x == 1'b1) begin
        PV_addr <= 9'b000000000;
      end
      else begin
        if (PV_enb) begin
          if (PV_addr >= 9'b111110100) begin
            PV_addr <= 9'b000000000;
          end
          else begin
            PV_addr <= PV_addr + 9'b000000001;
          end
        end
      end
    end



  assign PV_lastAddr = PV_addr >= 9'b111110100;



  assign PV_done = PV_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset_x) begin
        check1_done <= 0;
      end
      else begin
        if (PV_done_enb) begin
          check1_done <= PV_done;
        end
      end
    end

  assign snkDone = check1_done & check2_done;



  assign #1 PV_addr_delay_1 = PV_addr;

  // Data source for PV_expected
  initial
    begin : PV_expected_fileread
      fp_PV_expected = $fopen("PV_expected.dat", "r");
      status_PV_expected = $rewind(fp_PV_expected);
    end

  always @(PV_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        PV_expected <= 16'bx;
      end
      else if (ce_out == 1) begin
        status_PV_expected = $fscanf(fp_PV_expected, "%h", PV_expected);
      end
    end

  assign PV_ref = PV_expected;

  always @(posedge clk)
    begin : PV_checker
      if (reset_x == 1'b1) begin
        PV_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && PV !== PV_ref) begin
          PV_testFailure <= 1'b1;
          $display("ERROR in PV at time %t : Expected '%h' Actual '%h'", $time, PV_ref, PV);
        end
      end
    end

  assign #1 MV_addr_delay_1 = PV_addr;

  // Data source for MV_expected
  initial
    begin : MV_expected_fileread
      fp_MV_expected = $fopen("MV_expected.dat", "r");
      status_MV_expected = $rewind(fp_MV_expected);
    end

  always @(MV_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        MV_expected <= 16'bx;
      end
      else if (ce_out == 1) begin
        status_MV_expected = $fscanf(fp_MV_expected, "%h", MV_expected);
      end
    end

  assign MV_ref = MV_expected;

  always @(posedge clk)
    begin : MV_checker
      if (reset_x == 1'b1) begin
        MV_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && MV !== MV_ref) begin
          MV_testFailure <= 1'b1;
          $display("ERROR in MV at time %t : Expected '%h' Actual '%h'", $time, MV_ref, MV);
        end
      end
    end

  assign testFailure = PV_testFailure | MV_testFailure;



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // DT_tb

